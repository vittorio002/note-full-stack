{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { db } from \"../firebase\";\nimport firebase from '../firebase';\nimport { useDispatch } from 'react-redux';\nimport { query, collection, onSnapshot } from \"firebase/firestore\";\nconst initState = {\n  notes: []\n};\nconst RootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  if (action.type == 'FETCH_DATA_SUCCESS') {\n    console.log('ho caricato');\n    return {\n      ...state,\n      notes: action.payload\n    };\n  } else if (action.type == 'CHANGE_STATE') {\n    const newState = state.notes;\n    newState.map(note => {\n      if (note.id == action.id) {\n        note.descrizione = action.change;\n        note.nome = action.nome;\n      }\n    });\n    return {\n      ...state,\n      notes: newState\n    };\n  } else if (action.type == 'ADD_NOTE') {\n    let id = state.notes.length;\n    const newNote = {\n      id: Math.random(),\n      nome: 'new note',\n      descrizione: '.'\n    };\n    const newNotes = [...state.notes, newNote];\n    return {\n      ...state,\n      notes: newNotes\n    };\n  } else if (action.type == 'DELETE_NOTE') {\n    const newState = state.notes.filter(note => note.id != action.id);\n    return {\n      ...state,\n      notes: newState\n    };\n  }\n  return state;\n};\n_c = RootReducer;\nconst App = () => {\n  _s();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchData());\n  }, [dispatch]);\n};\n_s(App, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n_c2 = App;\nexport default RootReducer;\nvar _c, _c2;\n$RefreshReg$(_c, \"RootReducer\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["useState","useEffect","db","firebase","useDispatch","query","collection","onSnapshot","initState","notes","RootReducer","state","arguments","length","undefined","action","type","console","log","payload","newState","map","note","id","descrizione","change","nome","newNote","Math","random","newNotes","filter","_c","App","_s","dispatch","fetchData","_c2","$RefreshReg$"],"sources":["C:/Users/Vittorio/Desktop/react/note/src/component/rootReducer.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase\";\r\nimport firebase from '../firebase';\r\nimport { useDispatch } from 'react-redux';\r\nimport { query, collection, onSnapshot } from \"firebase/firestore\";\r\n\r\nconst initState = {\r\n    notes: [],\r\n  };\r\n\r\n\r\nconst RootReducer = (state = initState, action)=>{\r\n\r\n    if(action.type == 'FETCH_DATA_SUCCESS'){\r\n        console.log('ho caricato');\r\n        return {\r\n            ...state,\r\n            notes: action.payload,\r\n          };\r\n    }else if(action.type == 'CHANGE_STATE'){\r\n      const newState = state.notes;\r\n      newState.map(note=>{\r\n          if(note.id == action.id){\r\n          note.descrizione = action.change\r\n          note.nome = action.nome\r\n      }})\r\n      return{\r\n          ...state,\r\n         notes: newState\r\n      }\r\n  }else if(action.type == 'ADD_NOTE'){\r\n     let id = state.notes.length\r\n     const newNote = {\r\n      id: Math.random(),\r\n      nome: 'new note',\r\n      descrizione:'.'\r\n     };\r\n     const newNotes =[...state.notes, newNote];\r\n     return{\r\n      ...state,\r\n      notes: newNotes\r\n     }\r\n  }else if(action.type == 'DELETE_NOTE'){\r\n      const newState = state.notes.filter(note=> note.id != action.id)\r\n      return{\r\n          ...state,\r\n          notes : newState\r\n      }\r\n  }\r\n  return state\r\n}\r\n\r\nconst App = () => {\r\n    const dispatch = useDispatch();\r\n  \r\n    useEffect(() => {\r\n      dispatch(fetchData());\r\n    }, [dispatch]);\r\n  };\r\n\r\n  \r\n\r\nexport default RootReducer;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,EAAE,QAAQ,aAAa;AAChC,OAAOC,QAAQ,MAAM,aAAa;AAClC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,KAAK,EAAEC,UAAU,EAAEC,UAAU,QAAQ,oBAAoB;AAElE,MAAMC,SAAS,GAAG;EACdC,KAAK,EAAE;AACT,CAAC;AAGH,MAAMC,WAAW,GAAG,SAAAA,CAAA,EAA6B;EAAA,IAA5BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGJ,SAAS;EAAA,IAAEO,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAE1C,IAAGC,MAAM,CAACC,IAAI,IAAI,oBAAoB,EAAC;IACnCC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1B,OAAO;MACH,GAAGP,KAAK;MACRF,KAAK,EAAEM,MAAM,CAACI;IAChB,CAAC;EACP,CAAC,MAAK,IAAGJ,MAAM,CAACC,IAAI,IAAI,cAAc,EAAC;IACrC,MAAMI,QAAQ,GAAGT,KAAK,CAACF,KAAK;IAC5BW,QAAQ,CAACC,GAAG,CAACC,IAAI,IAAE;MACf,IAAGA,IAAI,CAACC,EAAE,IAAIR,MAAM,CAACQ,EAAE,EAAC;QACxBD,IAAI,CAACE,WAAW,GAAGT,MAAM,CAACU,MAAM;QAChCH,IAAI,CAACI,IAAI,GAAGX,MAAM,CAACW,IAAI;MAC3B;IAAC,CAAC,CAAC;IACH,OAAM;MACF,GAAGf,KAAK;MACTF,KAAK,EAAEW;IACV,CAAC;EACL,CAAC,MAAK,IAAGL,MAAM,CAACC,IAAI,IAAI,UAAU,EAAC;IAChC,IAAIO,EAAE,GAAGZ,KAAK,CAACF,KAAK,CAACI,MAAM;IAC3B,MAAMc,OAAO,GAAG;MACfJ,EAAE,EAAEK,IAAI,CAACC,MAAM,CAAC,CAAC;MACjBH,IAAI,EAAE,UAAU;MAChBF,WAAW,EAAC;IACb,CAAC;IACD,MAAMM,QAAQ,GAAE,CAAC,GAAGnB,KAAK,CAACF,KAAK,EAAEkB,OAAO,CAAC;IACzC,OAAM;MACL,GAAGhB,KAAK;MACRF,KAAK,EAAEqB;IACR,CAAC;EACJ,CAAC,MAAK,IAAGf,MAAM,CAACC,IAAI,IAAI,aAAa,EAAC;IAClC,MAAMI,QAAQ,GAAGT,KAAK,CAACF,KAAK,CAACsB,MAAM,CAACT,IAAI,IAAGA,IAAI,CAACC,EAAE,IAAIR,MAAM,CAACQ,EAAE,CAAC;IAChE,OAAM;MACF,GAAGZ,KAAK;MACRF,KAAK,EAAGW;IACZ,CAAC;EACL;EACA,OAAOT,KAAK;AACd,CAAC;AAAAqB,EAAA,GAvCKtB,WAAW;AAyCjB,MAAMuB,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAMC,QAAQ,GAAG/B,WAAW,CAAC,CAAC;EAE9BH,SAAS,CAAC,MAAM;IACdkC,QAAQ,CAACC,SAAS,CAAC,CAAC,CAAC;EACvB,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;AAChB,CAAC;AAACD,EAAA,CANED,GAAG;EAAA,QACY7B,WAAW;AAAA;AAAAiC,GAAA,GAD1BJ,GAAG;AAUT,eAAevB,WAAW;AAAC,IAAAsB,EAAA,EAAAK,GAAA;AAAAC,YAAA,CAAAN,EAAA;AAAAM,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}