{"ast":null,"code":"import { query, collection, onSnapshot } from \"firebase/firestore\";\nimport { db } from \"../firebase\";\nconst fetchData = () => {\n  return async dispatch => {\n    const q = query(collection(db, 'note'));\n    const unsubscribe = onSnapshot(q, querySnapshot => {\n      const data = [];\n      querySnapshot.forEach(doc => {\n        data.push({\n          ...doc.data(),\n          id: doc.id\n        });\n      });\n      dispatch({\n        type: 'FETCH_DATA_SUCCESS',\n        payload: data\n      });\n    });\n    return () => unsubscribe();\n  };\n};\nconst initState = {\n  notes: []\n};\nconst RootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  if (action.type == 'FETCH_DATA_SUCCESS') {\n    console.log('ho caricato');\n    return {\n      ...state,\n      notes: action.payload\n    };\n  } /*else if(action.type == 'CHANGE_STATE'){\r\n     const newState = state.notes;\r\n     newState.map(note=>{\r\n         if(note.id == action.id){\r\n         note.descrizione = action.change\r\n         note.nome = action.nome\r\n     }})\r\n     return{\r\n         ...state,\r\n        notes: newState\r\n     }\r\n    }else if(action.type == 'ADD_NOTE'){\r\n    let id = state.notes.length\r\n    const newNote = {\r\n     id: Math.random(),\r\n     nome: 'new note',\r\n     descrizione:'.'\r\n    };\r\n    const newNotes =[...state.notes, newNote];\r\n    return{\r\n     ...state,\r\n     notes: newNotes\r\n    }\r\n    }else if(action.type == 'DELETE_NOTE'){\r\n     const newState = state.notes.filter(note=> note.id != action.id)\r\n     return{\r\n         ...state,\r\n         notes : newState\r\n     }\r\n    }*/\n  return state;\n};\n_c = RootReducer;\nexport { fetchData, RootReducer };\nvar _c;\n$RefreshReg$(_c, \"RootReducer\");","map":{"version":3,"names":["query","collection","onSnapshot","db","fetchData","dispatch","q","unsubscribe","querySnapshot","data","forEach","doc","push","id","type","payload","initState","notes","RootReducer","state","arguments","length","undefined","action","console","log","_c","$RefreshReg$"],"sources":["C:/Users/Vittorio/Desktop/react/note/src/component/rootReducer.js"],"sourcesContent":["import { query, collection, onSnapshot } from \"firebase/firestore\";\r\nimport { db } from \"../firebase\";\r\n\r\nconst fetchData = () => {\r\n    return async (dispatch) => {\r\n      const q = query(collection(db, 'note'));\r\n      const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n        const data = [];\r\n        querySnapshot.forEach((doc) => {\r\n          data.push({ ...doc.data(), id: doc.id });\r\n        });\r\n        dispatch({ type: 'FETCH_DATA_SUCCESS', payload: data });\r\n      });\r\n      return () => unsubscribe();\r\n    };\r\n  };\r\n\r\nconst initState = {\r\n    notes: [],\r\n  };\r\n\r\n\r\nconst RootReducer = (state = initState, action)=>{\r\n\r\n    if(action.type == 'FETCH_DATA_SUCCESS'){\r\n        console.log('ho caricato');\r\n        return {\r\n            ...state,\r\n            notes: action.payload,\r\n          };\r\n    }/*else if(action.type == 'CHANGE_STATE'){\r\n      const newState = state.notes;\r\n      newState.map(note=>{\r\n          if(note.id == action.id){\r\n          note.descrizione = action.change\r\n          note.nome = action.nome\r\n      }})\r\n      return{\r\n          ...state,\r\n         notes: newState\r\n      }\r\n  }else if(action.type == 'ADD_NOTE'){\r\n     let id = state.notes.length\r\n     const newNote = {\r\n      id: Math.random(),\r\n      nome: 'new note',\r\n      descrizione:'.'\r\n     };\r\n     const newNotes =[...state.notes, newNote];\r\n     return{\r\n      ...state,\r\n      notes: newNotes\r\n     }\r\n  }else if(action.type == 'DELETE_NOTE'){\r\n      const newState = state.notes.filter(note=> note.id != action.id)\r\n      return{\r\n          ...state,\r\n          notes : newState\r\n      }\r\n  }*/\r\n  return state\r\n}\r\n \r\n\r\nexport { fetchData, RootReducer };"],"mappings":"AAAA,SAASA,KAAK,EAAEC,UAAU,EAAEC,UAAU,QAAQ,oBAAoB;AAClE,SAASC,EAAE,QAAQ,aAAa;AAEhC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB,OAAO,MAAOC,QAAQ,IAAK;IACzB,MAAMC,CAAC,GAAGN,KAAK,CAACC,UAAU,CAACE,EAAE,EAAE,MAAM,CAAC,CAAC;IACvC,MAAMI,WAAW,GAAGL,UAAU,CAACI,CAAC,EAAGE,aAAa,IAAK;MACnD,MAAMC,IAAI,GAAG,EAAE;MACfD,aAAa,CAACE,OAAO,CAAEC,GAAG,IAAK;QAC7BF,IAAI,CAACG,IAAI,CAAC;UAAE,GAAGD,GAAG,CAACF,IAAI,CAAC,CAAC;UAAEI,EAAE,EAAEF,GAAG,CAACE;QAAG,CAAC,CAAC;MAC1C,CAAC,CAAC;MACFR,QAAQ,CAAC;QAAES,IAAI,EAAE,oBAAoB;QAAEC,OAAO,EAAEN;MAAK,CAAC,CAAC;IACzD,CAAC,CAAC;IACF,OAAO,MAAMF,WAAW,CAAC,CAAC;EAC5B,CAAC;AACH,CAAC;AAEH,MAAMS,SAAS,GAAG;EACdC,KAAK,EAAE;AACT,CAAC;AAGH,MAAMC,WAAW,GAAG,SAAAA,CAAA,EAA6B;EAAA,IAA5BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGJ,SAAS;EAAA,IAAEO,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAE1C,IAAGC,MAAM,CAACT,IAAI,IAAI,oBAAoB,EAAC;IACnCU,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1B,OAAO;MACH,GAAGN,KAAK;MACRF,KAAK,EAAEM,MAAM,CAACR;IAChB,CAAC;EACP,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOI,KAAK;AACd,CAAC;AAAAO,EAAA,GAvCKR,WAAW;AA0CjB,SAASd,SAAS,EAAEc,WAAW;AAAG,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}