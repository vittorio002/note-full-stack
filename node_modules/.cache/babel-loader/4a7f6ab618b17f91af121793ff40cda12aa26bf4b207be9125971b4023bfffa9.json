{"ast":null,"code":"import { firestore } from './firebase';\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  if (action.type === 'ADD_NOTE') {\n    const newNote = {\n      id: Math.random(),\n      nome: 'new note',\n      descrizione: '.'\n    };\n    firestore.collection('notes').add(newNote).then(() => console.log('Nota aggiunta con successo al database')).catch(error => console.error('Errore durante l\\'aggiunta della nota:', error));\n    const newNotes = [...state.notes, newNote];\n    return {\n      ...state,\n      notes: newNotes\n    };\n  } else if (action.type === 'DELETE_NOTE') {\n    firestore.collection('notes').doc(action.id).delete().then(() => console.log('Nota eliminata con successo dal database')).catch(error => console.error('Errore durante l\\'eliminazione della nota:', error));\n    const newState = state.notes.filter(note => note.id !== action.id);\n    return {\n      ...state,\n      notes: newState\n    };\n  }\n  return state;\n};","map":{"version":3,"names":["firestore","rootReducer","state","arguments","length","undefined","initState","action","type","newNote","id","Math","random","nome","descrizione","collection","add","then","console","log","catch","error","newNotes","notes","doc","delete","newState","filter","note"],"sources":["C:/Users/Vittorio/Desktop/react/note/src/component/rootReducer.js"],"sourcesContent":["import { firestore } from './firebase';\r\n\r\n\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n  if (action.type === 'ADD_NOTE') {\r\n    const newNote = {\r\n      id: Math.random(),\r\n      nome: 'new note',\r\n      descrizione: '.',\r\n    };\r\n    firestore.collection('notes').add(newNote)\r\n      .then(() => console.log('Nota aggiunta con successo al database'))\r\n      .catch((error) => console.error('Errore durante l\\'aggiunta della nota:', error));\r\n\r\n    const newNotes = [...state.notes, newNote];\r\n    return {\r\n      ...state,\r\n      notes: newNotes,\r\n    };\r\n  } else if (action.type === 'DELETE_NOTE') {\r\n    firestore.collection('notes').doc(action.id).delete()\r\n      .then(() => console.log('Nota eliminata con successo dal database'))\r\n      .catch((error) => console.error('Errore durante l\\'eliminazione della nota:', error));\r\n\r\n    const newState = state.notes.filter((note) => note.id !== action.id);\r\n    return {\r\n      ...state,\r\n      notes: newState,\r\n    };\r\n  }\r\n  return state;\r\n};"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AAItC,MAAMC,WAAW,GAAG,SAAAA,CAAA,EAA+B;EAAA,IAA9BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGG,SAAS;EAAA,IAAEC,MAAM,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC5C,IAAIE,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;IAC9B,MAAMC,OAAO,GAAG;MACdC,EAAE,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC;MACjBC,IAAI,EAAE,UAAU;MAChBC,WAAW,EAAE;IACf,CAAC;IACDd,SAAS,CAACe,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACP,OAAO,CAAC,CACvCQ,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC,CAAC,CACjEC,KAAK,CAAEC,KAAK,IAAKH,OAAO,CAACG,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC,CAAC;IAEnF,MAAMC,QAAQ,GAAG,CAAC,GAAGpB,KAAK,CAACqB,KAAK,EAAEd,OAAO,CAAC;IAC1C,OAAO;MACL,GAAGP,KAAK;MACRqB,KAAK,EAAED;IACT,CAAC;EACH,CAAC,MAAM,IAAIf,MAAM,CAACC,IAAI,KAAK,aAAa,EAAE;IACxCR,SAAS,CAACe,UAAU,CAAC,OAAO,CAAC,CAACS,GAAG,CAACjB,MAAM,CAACG,EAAE,CAAC,CAACe,MAAM,CAAC,CAAC,CAClDR,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC,CAAC,CACnEC,KAAK,CAAEC,KAAK,IAAKH,OAAO,CAACG,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC,CAAC;IAEvF,MAAMK,QAAQ,GAAGxB,KAAK,CAACqB,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAAClB,EAAE,KAAKH,MAAM,CAACG,EAAE,CAAC;IACpE,OAAO;MACL,GAAGR,KAAK;MACRqB,KAAK,EAAEG;IACT,CAAC;EACH;EACA,OAAOxB,KAAK;AACd,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}